package com.google.common.testing.testng;

import org.testng.Assert;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.regex.MatchResult;

/**
 * Unit Test for {@link TestNGAsserts}.
 * 
 * @author Kartik Kumar
 */
public class TestNGAssertsTest {


	public void testNotEqualSuccess() throws Exception {
		TestNGAsserts.assertNotEqual(1, 2);
	}

  
	public void testNotEqualNullSuccess1() throws Exception {
		TestNGAsserts.assertNotEqual(null, 1);
	}

  
	public void testNotEqualNullSuccess2() throws Exception {
		TestNGAsserts.assertNotEqual(2, null);
	}

  /*(expectedExceptions = AssertionError.class,
      expectedExceptionsMessageRegExp = "^expected not to be <1>$" ) */
	public void testNotEqualFailure() throws Exception {
		TestNGAsserts.assertNotEqual(1, 1);
	}

  /*(expectedExceptions = AssertionError.class,
      expectedExceptionsMessageRegExp = "^expected not to be <null>$")  */
	public void testNotEqualNullFailure() throws Exception {
		TestNGAsserts.assertNotEqual(null, null);
	}

  /*(expectedExceptions = AssertionError.class,
  expectedExceptionsMessageRegExp = "")         */
	public void testMessageReturnedWithNotEqualFailure() throws Exception {
		try {
			TestNGAsserts.assertNotEqual(1, 1, "foo");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals("failure message generated by MoreAsserts",
			          "foo expected not to be <1>", ae.getMessage());
		}
	}

  
	public void testMatchesRegexSuccess() throws Exception {
		MatchResult result = TestNGAsserts.assertMatchesRegex("a(.)", "ab");
		Assert.assertEquals("b", result.group(1));
	}

  
	public void testMatchesRegexFailure() throws Exception {
		try {
			TestNGAsserts.assertMatchesRegex("ac", "a");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals("expected to match regex <ac> but was:<a>",
					ae.getMessage());
		}
	}

  
	public void testMatchesRegexFailureWithMessage() throws Exception {
		try {
			TestNGAsserts.assertMatchesRegex("foo", "ac", "a");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals("foo expected to match regex <ac> but was:<a>",
					ae.getMessage());
		}
	}

  
	public void testMatchesRegexNullFailure() throws Exception {
		try {
			TestNGAsserts.assertMatchesRegex("a(.)", null);
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals("expected to match regex <a(.)> but was:null",
					ae.getMessage());
		}
	}

  
	public void testNotMatchesRegexSuccess() throws Exception {
		TestNGAsserts.assertNotMatchesRegex("ab", "a");
	}

  
	public void testNotMatchesRegexFailure() throws Exception {
		try {
			TestNGAsserts.assertNotMatchesRegex("a(.)", "ab");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"expected not to match regex <a(.)> but was <ab>",
					ae.getMessage());
		}
	}

  
	public void testNotMatchesRegexFailureWithMessage() throws Exception {
		try {
			TestNGAsserts.assertNotMatchesRegex("foo", "a(.)", "ab");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"foo expected not to match regex <a(.)> but was <ab>",
					ae.getMessage());
		}
	}

  
	public void testContainsRegexSuccess() throws Exception {
		TestNGAsserts.assertContainsRegex("a(.)", "ab");
	}

  
	public void testContainsRegexFailure() throws Exception {
		try {
			TestNGAsserts.assertContainsRegex("ab", "a");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals("expected to contain regex <ab> but was:<a>",
					ae.getMessage());
		}
	}

  
	public void testContainsRegexFailureWithMessage() throws Exception {
		try {
			TestNGAsserts.assertContainsRegex("foo", "ab", "a");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"foo expected to contain regex <ab> but was:<a>",
					ae.getMessage());
		}
	}

  
	public void testContainsNullRegexFailure() throws Exception {
		try {
			TestNGAsserts.assertContainsRegex("ab", null);
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"expected to contain regex <ab> but was:null",
					ae.getMessage());
		}
	}

  
	public void testNotContainsRegexSuccess() throws Exception {
		TestNGAsserts.assertNotContainsRegex("ab", "a");
	}

  
	public void testNotContainsRegexFailure() throws Exception {
		try {
			TestNGAsserts.assertNotContainsRegex("a(.)", "ab");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"expected not to contain regex <a(.)> but contains <ab>",
					ae.getMessage());
		}
	}

  
	public void testNotContainsRegexFailureWithMessage() throws Exception {
		try {
			TestNGAsserts.assertNotContainsRegex("foo", "a(.)", "ab");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"foo expected not to contain regex <a(.)> but contains <ab>",
					ae.getMessage());
		}
	}

  
	public void testAssertEqualsOrder() throws Exception {
		List<Integer> integers = Arrays.asList(1, 2, 3);
		TestNGAsserts.assertEqualsOrder(integers, 1 ,2 ,3);
	}

  
	public void testAssertEqualsOrderFailure() throws Exception {
		List<Integer> integers = Arrays.asList(1, 2, 3);
		try {
			TestNGAsserts.assertEqualsOrder(integers, 1, 3, 2);
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"Lists differ at element [1]: 2 != 3 expected:<2> but was:<3>",
					ae.getMessage());
		}
	}

  
	public void testAssertEqualsOrderFailureWithMessage() throws Exception {
		List<Integer> integers = Arrays.asList(1, 2, 3);
		try {
			TestNGAsserts.assertEqualsOrder("foo", integers, 1, 3, 2);
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"foo: Lists differ at element [1]: 2 != 3 expected:<2> but was:<3>",
					ae.getMessage());
		}
	}

  
	public void testAssertEqualsOrderEmptyCollection() throws Exception {
		List<String> list = Collections.emptyList();
		TestNGAsserts.assertEqualsOrder(list);
	}

  
	public void testAssertEqualsOrderEmptyCollectionFailure() throws Exception {
		List<String> list = Collections.emptyList();
		try {
			TestNGAsserts.assertEqualsOrder(list, "abc");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"null: lists don't have the same size expected:<0> but was:<1>",
					ae.getMessage());
		}
	}

  
	public void testAssertEqualsOrderEmptyCollectionFailureWithMessage() throws Exception {
		List<String> list = Collections.emptyList();
		try {
			TestNGAsserts.assertEqualsOrder("foo", list, "abc");
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"foo: lists don't have the same size expected:<0> but was:<1>",
					ae.getMessage());
		}
	}

  
	public void testAssertsEqualsOrderEmptyFailureEmptyExpected() throws Exception {
		List<String> list = Collections.singletonList("abc");
		try {
			TestNGAsserts.assertEqualsOrder("null", list);
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"null: lists don't have the same size expected:<1> but was:<0>",
					ae.getMessage());
		}
	}

  
	public void testAssertsEqualsOrderEmptyFailureEmptyExpectedWithMessage() throws Exception {
		List<String> list = Collections.singletonList("abc");
		try {
			TestNGAsserts.assertEqualsOrder("foo", list);
			Assert.fail("no exception is thrown");
		} catch (AssertionError ae) {
			Assert.assertEquals(
					"foo: lists don't have the same size expected:<1> but was:<0>",
					ae.getMessage());
		}
	}
}
